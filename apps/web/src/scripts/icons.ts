import * as path from "node:path"
import * as fs from "node:fs/promises"
import { glob } from "fast-glob"
import { parse } from "node-html-parser"

const cwd = process.cwd()
const inputDir = path.join(cwd, "src", "assets", "icons")
const inputDirRelative = path.relative(cwd, inputDir)
const typeDir = path.join(cwd, "src", "lib", "types")
const outputDir = path.join(cwd, "src", "components", "spritesheet")

async function ensureDir(dirPath: string) {
  try {
    await fs.stat(dirPath)
  } catch (err) {
    if ((err as any).code === "ENOENT") {
      await fs.mkdir(dirPath, { recursive: true })
    } else {
      throw err
    }
  }
}

function iconName(file: string) {
  return file.replace(/\.svg$/, "").replace(/\\/g, "/")
}

async function writeIfChanged(filepath: string, newContent: string) {
  try {
    const currentContent = await fs.readFile(filepath, "utf8")
    if (currentContent === newContent) return false
    await fs.writeFile(filepath, newContent, "utf8")
    return true
  } catch (err) {
    if ((err as any).code === "ENOENT") {
      await fs.writeFile(filepath, newContent, "utf8")
      return true
    } else {
      throw err
    }
  }
}

/**
 * Creates a single SVG file that contains all the icons
 */
async function generateSvgSprite({
  files,
  inputDir,
  outputPath,
}: {
  files: string[]
  inputDir: string
  outputPath: string
}) {
  // Each SVG becomes a symbol and we wrap them all in a single SVG
  const symbols = await Promise.all(
    files.map(async (file) => {
      const input = await fs.readFile(path.join(inputDir, file), "utf8")
      const root = parse(input)

      const svg = root.querySelector("svg")
      if (!svg) throw new Error("No SVG element found")

      svg.tagName = "symbol"
      svg.setAttribute("id", iconName(file))
      svg.removeAttribute("xmlns")
      svg.removeAttribute("xmlns:xlink")
      svg.removeAttribute("version")
      svg.removeAttribute("width")
      svg.removeAttribute("height")

      return svg.toString().trim()
    }),
  )

  const output = [
    `<?xml version="1.0" encoding="UTF-8"?>`,
    `<!-- This file is generated by npm run build:icons -->`,
    `<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="0" height="0">`,
    `<defs>`,
    ...symbols,
    `</defs>`,
    `</svg>`,
    "",
  ].join("\n")

  return writeIfChanged(outputPath, output)
}

;(async () => {
  await ensureDir(outputDir)
  await ensureDir(typeDir)

  const files = glob
    .sync("**/*.svg", {
      cwd: inputDir,
    })
    .sort((a, b) => a.localeCompare(b))

  const shouldVerboseLog = process.argv.includes("--log=verbose")
  const logVerbose = shouldVerboseLog ? console.log : () => {}

  if (files.length === 0) {
    console.log(`No SVG files found in ${inputDirRelative}`)
  } else {
    await generateIconFiles()
  }

  async function generateIconFiles() {
    const spriteFilepath = path.join(outputDir, "spritesheet.svg")
    const typeOutputFilepath = path.join(typeDir, "icons.ts")
    const currentSprite = await fs
      .readFile(spriteFilepath, "utf8")
      .catch(() => "")
    const currentTypes = await fs
      .readFile(typeOutputFilepath, "utf8")
      .catch(() => "")

    const iconNames = files.map((file) => iconName(file))

    const spriteUpToDate = iconNames.every((name) =>
      currentSprite.includes(`id=${name}`),
    )
    const typesUpToDate = iconNames.every((name) =>
      currentTypes.includes(`"${name}"`),
    )

    if (spriteUpToDate && typesUpToDate) {
      logVerbose(`Icons are up to date`)
      return
    }

    logVerbose(`Generating sprite for ${inputDirRelative}`)

    const spriteChanged = await generateSvgSprite({
      files,
      inputDir,
      outputPath: spriteFilepath,
    })

    for (const file of files) {
      logVerbose("âœ…", file)
    }
    logVerbose(`Saved to ${path.relative(cwd, spriteFilepath)}`)

    const stringifiedIconNames = iconNames.map((name) => JSON.stringify(name))

    const typeOutputContent = `// This file is generated by pnpm run icons
  
  export type IconName =
  \t| ${stringifiedIconNames.join("\n\t| ")};
  `
    const typesChanged = await writeIfChanged(
      typeOutputFilepath,
      typeOutputContent,
    )

    logVerbose(`Manifest saved to ${path.relative(cwd, typeOutputFilepath)}`)

    if (spriteChanged || typesChanged) {
      console.log(`Generated ${files.length} icons`)
    }
  }
})()
