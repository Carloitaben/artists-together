// import type { NextRequest } from "next/server"
// import { Locations } from "db"

export const countries: Record<string, string> = {
  AW: "Aruba",
  AF: "Afghanistan",
  AO: "Angola",
  AI: "Anguilla",
  AX: "Åland Islands",
  AL: "Albania",
  AD: "Andorra",
  AE: "United Arab Emirates",
  AR: "Argentina",
  AM: "Armenia",
  AS: "American Samoa",
  AQ: "Antarctica",
  TF: "French Southern and Antarctic Lands",
  AG: "Antigua and Barbuda",
  AU: "Australia",
  AT: "Austria",
  AZ: "Azerbaijan",
  BI: "Burundi",
  BE: "Belgium",
  BJ: "Benin",
  BF: "Burkina Faso",
  BD: "Bangladesh",
  BG: "Bulgaria",
  BH: "Bahrain",
  BS: "Bahamas",
  BA: "Bosnia and Herzegovina",
  BL: "Saint Barthélemy",
  SH: "Saint Helena, Ascension and Tristan da Cunha",
  BY: "Belarus",
  BZ: "Belize",
  BM: "Bermuda",
  BO: "Bolivia",
  BQ: "Caribbean Netherlands",
  BR: "Brazil",
  BB: "Barbados",
  BN: "Brunei",
  BT: "Bhutan",
  BV: "Bouvet Island",
  BW: "Botswana",
  CF: "Central African Republic",
  CA: "Canada",
  CC: "Cocos (Keeling) Islands",
  CH: "Switzerland",
  CL: "Chile",
  CN: "China",
  CI: "Ivory Coast",
  CM: "Cameroon",
  CD: "DR Congo",
  CG: "Republic of the Congo",
  CK: "Cook Islands",
  CO: "Colombia",
  KM: "Comoros",
  CV: "Cape Verde",
  CR: "Costa Rica",
  CU: "Cuba",
  CW: "Curaçao",
  CX: "Christmas Island",
  KY: "Cayman Islands",
  CY: "Cyprus",
  CZ: "Czechia",
  DE: "Germany",
  DJ: "Djibouti",
  DM: "Dominica",
  DK: "Denmark",
  DO: "Dominican Republic",
  DZ: "Algeria",
  EC: "Ecuador",
  EG: "Egypt",
  ER: "Eritrea",
  EH: "Western Sahara",
  ES: "Spain",
  EE: "Estonia",
  ET: "Ethiopia",
  FI: "Finland",
  FJ: "Fiji",
  FK: "Falkland Islands",
  FR: "France",
  FO: "Faroe Islands",
  FM: "Micronesia",
  GA: "Gabon",
  GB: "United Kingdom",
  GE: "Georgia",
  GG: "Guernsey",
  GH: "Ghana",
  GI: "Gibraltar",
  GN: "Guinea",
  GP: "Guadeloupe",
  GM: "Gambia",
  GW: "Guinea-Bissau",
  GQ: "Equatorial Guinea",
  GR: "Greece",
  GD: "Grenada",
  GL: "Greenland",
  GT: "Guatemala",
  GF: "French Guiana",
  GU: "Guam",
  GY: "Guyana",
  HK: "Hong Kong",
  HM: "Heard Island and McDonald Islands",
  HN: "Honduras",
  HR: "Croatia",
  HT: "Haiti",
  HU: "Hungary",
  ID: "Indonesia",
  IM: "Isle of Man",
  IN: "India",
  IO: "British Indian Ocean Territory",
  IE: "Ireland",
  IR: "Iran",
  IQ: "Iraq",
  IS: "Iceland",
  IL: "Israel",
  IT: "Italy",
  JM: "Jamaica",
  JE: "Jersey",
  JO: "Jordan",
  JP: "Japan",
  KZ: "Kazakhstan",
  KE: "Kenya",
  KG: "Kyrgyzstan",
  KH: "Cambodia",
  KI: "Kiribati",
  KN: "Saint Kitts and Nevis",
  KR: "South Korea",
  XK: "Kosovo",
  KW: "Kuwait",
  LA: "Laos",
  LB: "Lebanon",
  LR: "Liberia",
  LY: "Libya",
  LC: "Saint Lucia",
  LI: "Liechtenstein",
  LK: "Sri Lanka",
  LS: "Lesotho",
  LT: "Lithuania",
  LU: "Luxembourg",
  LV: "Latvia",
  MO: "Macau",
  MF: "Saint Martin",
  MA: "Morocco",
  MC: "Monaco",
  MD: "Moldova",
  MG: "Madagascar",
  MV: "Maldives",
  MX: "Mexico",
  MH: "Marshall Islands",
  MK: "North Macedonia",
  ML: "Mali",
  MT: "Malta",
  MM: "Myanmar",
  ME: "Montenegro",
  MN: "Mongolia",
  MP: "Northern Mariana Islands",
  MZ: "Mozambique",
  MR: "Mauritania",
  MS: "Montserrat",
  MQ: "Martinique",
  MU: "Mauritius",
  MW: "Malawi",
  MY: "Malaysia",
  YT: "Mayotte",
  NA: "Namibia",
  NC: "New Caledonia",
  NE: "Niger",
  NF: "Norfolk Island",
  NG: "Nigeria",
  NI: "Nicaragua",
  NU: "Niue",
  NL: "Netherlands",
  NO: "Norway",
  NP: "Nepal",
  NR: "Nauru",
  NZ: "New Zealand",
  OM: "Oman",
  PK: "Pakistan",
  PA: "Panama",
  PN: "Pitcairn Islands",
  PE: "Peru",
  PH: "Philippines",
  PW: "Palau",
  PG: "Papua New Guinea",
  PL: "Poland",
  PR: "Puerto Rico",
  KP: "North Korea",
  PT: "Portugal",
  PY: "Paraguay",
  PS: "Palestine",
  PF: "French Polynesia",
  QA: "Qatar",
  RE: "Réunion",
  RO: "Romania",
  RU: "Russia",
  RW: "Rwanda",
  SA: "Saudi Arabia",
  SD: "Sudan",
  SN: "Senegal",
  SG: "Singapore",
  GS: "South Georgia",
  SJ: "Svalbard and Jan Mayen",
  SB: "Solomon Islands",
  SL: "Sierra Leone",
  SV: "El Salvador",
  SM: "San Marino",
  SO: "Somalia",
  PM: "Saint Pierre and Miquelon",
  RS: "Serbia",
  SS: "South Sudan",
  ST: "São Tomé and Príncipe",
  SR: "Suriname",
  SK: "Slovakia",
  SI: "Slovenia",
  SE: "Sweden",
  SZ: "Eswatini",
  SX: "Sint Maarten",
  SC: "Seychelles",
  SY: "Syria",
  TC: "Turks and Caicos Islands",
  TD: "Chad",
  TG: "Togo",
  TH: "Thailand",
  TJ: "Tajikistan",
  TK: "Tokelau",
  TM: "Turkmenistan",
  TL: "Timor-Leste",
  TO: "Tonga",
  TT: "Trinidad and Tobago",
  TN: "Tunisia",
  TR: "Turkey",
  TV: "Tuvalu",
  TW: "Taiwan",
  TZ: "Tanzania",
  UG: "Uganda",
  UA: "Ukraine",
  UM: "United States Minor Outlying Islands",
  UY: "Uruguay",
  US: "United States",
  UZ: "Uzbekistan",
  VA: "Vatican City",
  VC: "Saint Vincent and the Grenadines",
  VE: "Venezuela",
  VG: "British Virgin Islands",
  VI: "United States Virgin Islands",
  VN: "Vietnam",
  VU: "Vanuatu",
  WF: "Wallis and Futuna",
  WS: "Samoa",
  YE: "Yemen",
  ZA: "South Africa",
  ZM: "Zambia",
  ZW: "Zimbabwe",
}

// export function getGeo(request: NextRequest) {
//   let country = request.geo?.country
//   let city = request.geo?.country
//   let latitude = request.geo?.latitude
//   let longitude = request.geo?.longitude
//   let timezone = request.headers.get("x-vercel-ip-timezone")

//   if (process.env.NODE_ENV === "development") {
//     if (!country) country = "ES"
//     if (!city) city = "Barcelona"
//     if (!latitude) latitude = "41.3926386"
//     if (!longitude) longitude = "2.057789"
//     if (!timezone) timezone = "Europe/Madrid"
//   }

//   if (!country || !city || !latitude || !longitude || !timezone) return
//   if (!(country in countries)) return

//   const countryName = countries[country]

//   return {
//     country: countryName,
//     city,
//     latitude,
//     longitude,
//     timezone,
//   }
// }

// export const placeholders: NonNullable<ReturnType<typeof getGeo>>[] = [
export const placeholders = [
  {
    country: "SE",
    city: "Stockholm",
    latitude: "59.326038",
    longitude: "17.8172488",
    timezone: "Europe/Stockholm",
  },
  {
    country: "CA",
    city: "Toronto",
    latitude: "43.7181228",
    longitude: "-79.5428656",
    timezone: "America/Toronto",
  },
  {
    country: "PT",
    city: "Lisbon",
    latitude: "38.7440505",
    longitude: "-9.2421367",
    timezone: "Europe/Lisbon",
  },
  {
    country: "AU",
    city: "Canberra",
    latitude: "-35.2897347",
    longitude: "149.1412762",
    timezone: "Australia/Sydney",
  },
  {
    country: "JP",
    city: "Sapporo",
    latitude: "42.9848631",
    longitude: "140.9183317",
    timezone: "Asia/Tokyo",
  },
]

export async function getLocations() {
  // const locations = await Locations.list().then((locations) =>
  //   locations.map((location) => location.geo),
  // )

  // return locations.length < placeholders.length
  //   ? [...locations, ...placeholders]
  //   : locations

  return placeholders
}

export type Location = Awaited<ReturnType<typeof getLocations>>[number]
